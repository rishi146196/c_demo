pipeline {
    agent {
        label 'docker' // Jenkins agent label
    }

    environment {
        IMAGE_NAME = "c_demo"
        DOCKER_REGISTRY = "rushikesh196/c_demo"
        DOCKER_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "c-demo"
        K8S_NAMESPACE = "default"
        ARGOCD_APP_NAME = "c-demo"
        AKS_CLUSTER = "c-demo-aks"              // Your AKS cluster name
        AKS_RESOURCE_GROUP = "c-demo-rg"        // Your AKS resource group
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/rishi146196/c_demo.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t %DOCKER_REGISTRY%:%DOCKER_TAG% .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    retry(3) {
                        bat '''
                            echo %PASSWORD% | docker login -u %USERNAME% --password-stdin
                            docker tag %DOCKER_REGISTRY%:%DOCKER_TAG% %DOCKER_REGISTRY%:%DOCKER_TAG%
                            docker push %DOCKER_REGISTRY%:%DOCKER_TAG%
                        '''
                    }
                }
            }
        }

        stage('Authenticate with Azure') {
            steps {
                withCredentials([azureServicePrincipal(credentialsId: 'azure-sp-credentials', subscriptionIdVariable: 'AZ_SUBSCRIPTION_ID', clientIdVariable: 'AZ_CLIENT_ID', clientSecretVariable: 'AZ_CLIENT_SECRET', tenantIdVariable: 'AZ_TENANT_ID')]) {
                    bat '''
                        az login --service-principal -u %AZ_CLIENT_ID% -p %AZ_CLIENT_SECRET% --tenant %AZ_TENANT_ID%
                        az account set --subscription %AZ_SUBSCRIPTION_ID%
                    '''
                }
            }
        }

        stage('Configure AKS Credentials') {
            steps {
                bat 'az aks get-credentials --resource-group %AKS_RESOURCE_GROUP% --name %AKS_CLUSTER%'
            }
        }

        stage('Deploy to AKS') {
            steps {
                bat 'kubectl apply -f k8s\\deployment.yaml'
                bat 'kubectl apply -f k8s\\service.yaml'
                bat 'kubectl apply -f k8s\\Application.yaml'
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                withCredentials([string(credentialsId: 'gcp-argocd-password', variable: 'ARGOCD_PASSWORD')]) {
                    bat '''
                        C:/Users/dell/argocd.exe login 34.135.24.127:443 --username admin --password %ARGOCD_PASSWORD% --insecure
                        C:/Users/dell/argocd.exe app sync %ARGOCD_APP_NAME% --insecure
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed. Check logs above for details.'
        }
        success {
            echo '✅ Deployment successful.'
        }
    }
}
