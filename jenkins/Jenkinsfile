pipeline {
    agent {
        label 'docker' // Jenkins agent label
    }

    environment {
        IMAGE_NAME = "c_demo"
        DOCKER_REGISTRY = "rushikesh196/c_demo"
        DOCKER_TAG = "latest"
        K8S_DEPLOYMENT_NAME = "c-demo"
        K8S_NAMESPACE = "default"
        ARGOCD_APP_NAME = "c-demo"
        GKE_CLUSTER = "c-demo-cluster"
        GKE_ZONE = "us-central1-a"
        GCP_PROJECT = "ai-chatbot-459410"
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/rishi146196/c_demo.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                bat 'docker build -t %DOCKER_REGISTRY%:%DOCKER_TAG% .'
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    retry(3) {
                        bat '''
                            echo %PASSWORD% | docker login -u %USERNAME% --password-stdin
                            docker tag %DOCKER_REGISTRY%:%DOCKER_TAG% %DOCKER_REGISTRY%:%DOCKER_TAG%
                            docker push %DOCKER_REGISTRY%:%DOCKER_TAG%
                        '''
                    }
                }
            }
        }

        stage('Authenticate with GCP') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account', variable: 'GCP_KEY')]) {
                    bat '''
                        gcloud auth activate-service-account --key-file=%GCP_KEY%
                        gcloud config set project %GCP_PROJECT%
                        gcloud config set compute/zone %GKE_ZONE%
                    '''
                }
            }
        }

        stage('Configure GKE Credentials') {
            steps {
                bat 'gcloud container clusters get-credentials %GKE_CLUSTER% --zone %GKE_ZONE% --project %GCP_PROJECT%'
            }
        }

        stage('Deploy to k8s') {
            steps {
                bat 'kubectl apply -f k8s\\deployment.yaml'
                bat 'kubectl apply -f k8s\\service.yaml'
                bat 'kubectl apply -f k8s\\Application.yaml'
            }
        }

        stage('Sync with ArgoCD') {
            steps {
                withCredentials([string(credentialsId: 'gcp-argocd-password', variable: 'ARGOCD_PASSWORD')]) {
                    bat '''
                        C:/Users/dell/argocd.exe login 34.135.24.127:443 --username admin --password %ARGOCD_PASSWORD% --insecure
                        C:/Users/dell/argocd.exe app sync %ARGOCD_APP_NAME% --insecure
                    '''
                }
            }
        }
    }

    post {
        failure {
            echo '❌ Pipeline failed. Check logs above for details.'
        }
        success {
            echo '✅ Deployment successful.'
        }
    }
}
